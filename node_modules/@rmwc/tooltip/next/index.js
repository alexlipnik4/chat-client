var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { classNames } from '@rmwc/base';
import ReactTooltip from 'rc-tooltip';
import { withProviderContext } from '@rmwc/provider';
/** A Tooltip component for displaying informative popover information. */
export var Tooltip = withProviderContext()(function Tooltip(_a) {
    var children = _a.children, content = _a.content, className = _a.className, providerContext = _a.providerContext, open = _a.open, rest = __rest(_a, ["children", "content", "className", "providerContext", "open"]);
    // merge together provider options
    var _b = __assign({}, providerContext.tooltip, rest), _c = _b.showArrow, showArrow = _c === void 0 ? false : _c, _d = _b.enterDelay, enterDelay = _d === void 0 ? 0 : _d, _e = _b.leaveDelay, leaveDelay = _e === void 0 ? 0 : _e, _f = _b.align, align = _f === void 0 ? 'top' : _f, _g = _b.activateOn, activateOn = _g === void 0 ? ['hover', 'focus'] : _g;
    return (React.createElement(ReactTooltip, __assign({}, (open !== undefined ? { visible: open } : {}), { trigger: Array.isArray(activateOn) ? activateOn : [activateOn], prefixCls: "rmwc-tooltip", placement: align, transitionName: "rmwc-tooltip-zoom", mouseEnterDelay: enterDelay / 1000, mouseLeaveDelay: leaveDelay / 1000, overlay: content, overlayClassName: classNames(className, {
            'rmwc-tooltip--show-arrow': showArrow
        }), destroyTooltipOnHide: true }), children));
});
Tooltip.displayName = 'Tooltip';
