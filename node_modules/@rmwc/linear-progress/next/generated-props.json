{
    "npm": {},
    "typescript": {
        "LinearProgress": {
            "documentation": {
                "contents": [
                    "<p>A component to display linear progress.</p>\n"
                ],
                "contentsRaw": "A component to display linear progress.",
                "metadata": {}
            },
            "fileName": "src/linear-progress/index.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "class",
            "name": "LinearProgress",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L69",
            "extends": [
                "FoundationComponent<MDCLinearProgressFoundation, LinearProgressProps & DeprecatedLinearProgressProps>"
            ],
            "methods": [
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillMount",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillMount",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillReceiveProps",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillReceiveProps",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "UNSAFE_componentWillUpdate",
                    "inheritedFrom": "DeprecatedLifecycle.UNSAFE_componentWillUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>This method will not stop working in React 17.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "UNSAFE_componentWillUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidCatch",
                    "inheritedFrom": "ComponentLifecycle.componentDidCatch",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.</p>\n"
                                ],
                                "contentsRaw": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentDidCatch",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "error",
                                    "type": "Error"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "errorInfo",
                                    "type": "ErrorInfo"
                                }
                            ],
                            "returnType": "void",
                            "type": "(error: Error, errorInfo: ErrorInfo) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidMount",
                    "inheritedFrom": "FoundationComponent.componentDidMount",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentDidMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentDidUpdate",
                    "inheritedFrom": "FoundationComponent.componentDidUpdate",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentDidUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>"
                                }
                            ],
                            "returnType": "void",
                            "type": "(prevProps: FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>) => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillMount",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillMount",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before mounting occurs, and before <code>Component#render</code>.\nAvoid introducing any side-effects or subscriptions in this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillMount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillReceiveProps",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillReceiveProps",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.</p>\n<p>Calling <code>Component#setState</code> generally does not trigger this method.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillReceiveProps",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillUnmount",
                    "inheritedFrom": "FoundationComponent.componentWillUnmount",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "componentWillUnmount",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "componentWillUpdate",
                    "inheritedFrom": "DeprecatedLifecycle.componentWillUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called immediately before rendering when new props or state is received. Not called for the initial render.</p>\n<p>Note: You cannot call <code>Component#setState</code> here.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.</p>\n",
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                                    },
                                    {
                                        "tag": "see",
                                        "value": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
                                    }
                                ],
                                "contentsRaw": "Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n\n\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n@see https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "componentWillUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "type": "(nextProps: Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "createElement",
                    "inheritedFrom": "FoundationComponent.createElement",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "createElement",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "elementName",
                                    "type": "string"
                                }
                            ],
                            "returnType": "FoundationElement<ExtractProps<ElementType>, ElementType>",
                            "type": "(elementName: string) => FoundationElement<ExtractProps<ElementType>, ElementType>"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "emit",
                    "inheritedFrom": "FoundationComponent.emit",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Fires a cross-browser-compatible custom event from the component root of the given type,</p>\n"
                                ],
                                "contentsRaw": "Fires a cross-browser-compatible custom event from the component root of the given type,",
                                "metadata": {}
                            },
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "emit",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evtType",
                                    "type": "string"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "evtData",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "shouldBubble",
                                    "defaultValue": "false",
                                    "type": "boolean"
                                }
                            ],
                            "returnType": "CustomEvent<any>",
                            "type": "(evtType: string, evtData: any, shouldBubble?: boolean) => CustomEvent<any>"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getDefaultFoundation",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L84",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/index.tsx",
                            "kind": "signature",
                            "name": "getDefaultFoundation",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L84",
                            "parameters": [],
                            "returnType": "MDCLinearProgressFoundation",
                            "type": "() => MDCLinearProgressFoundation"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "getSnapshotBeforeUpdate",
                    "inheritedFrom": "NewLifecycle.getSnapshotBeforeUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Runs before React applies the result of <code>render</code> to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before <code>render</code> causes changes to it.</p>\n<p>Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.</p>\n"
                                ],
                                "contentsRaw": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "getSnapshotBeforeUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                }
                            ],
                            "returnType": "SS | null",
                            "type": "(prevProps: Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>, prevState: Readonly<FoundationStateT<S>>) => SS | null"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "render",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L145",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/index.tsx",
                            "kind": "signature",
                            "name": "render",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L145",
                            "parameters": [],
                            "returnType": "Element",
                            "type": "() => Element"
                        }
                    ]
                },
                {
                    "fileName": "node_modules/@types/react/index.d.ts",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "shouldComponentUpdate",
                    "inheritedFrom": "ComponentLifecycle.shouldComponentUpdate",
                    "signatures": [
                        {
                            "documentation": {
                                "contents": [
                                    "<p>Called to determine whether the change in props and state should trigger a re-render.</p>\n<p><code>Component</code> always returns true.\n<code>PureComponent</code> implements a shallow comparison on props and state and returns true if any\nprops or states have changed.</p>\n<p>If false is returned, <code>Component#render</code>, <code>componentWillUpdate</code>\nand <code>componentDidUpdate</code> will not be called.</p>\n"
                                ],
                                "contentsRaw": "Called to determine whether the change in props and state should trigger a re-render.\n\n`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.",
                                "metadata": {}
                            },
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "kind": "signature",
                            "name": "shouldComponentUpdate",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextProps",
                                    "type": "Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextState",
                                    "type": "Readonly<FoundationStateT<S>>"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "nextContext",
                                    "type": "any"
                                }
                            ],
                            "returnType": "boolean",
                            "type": "(nextProps: Readonly<FoundationPropsT<LinearProgressProps & DeprecatedLinearProgressProps>>, nextState: Readonly<FoundationStateT<S>>, nextContext: any) => boolean"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "sync",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L107",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/index.tsx",
                            "kind": "signature",
                            "name": "sync",
                            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L107",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "props",
                                    "type": "LinearProgressProps"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProps",
                                    "type": "LinearProgressProps"
                                }
                            ],
                            "returnType": "void",
                            "type": "(props: LinearProgressProps, prevProps: LinearProgressProps) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "syncProp",
                    "inheritedFrom": "FoundationComponent.syncProp",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "syncProp",
                            "parameters": [
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prop",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "prevProp",
                                    "type": "any"
                                },
                                {
                                    "flags": {
                                        "isExported": false,
                                        "isExternal": false,
                                        "isOptional": false,
                                        "isPrivate": false,
                                        "isProtected": false,
                                        "isPublic": false,
                                        "isRest": false,
                                        "isStatic": false
                                    },
                                    "kind": "parameter",
                                    "name": "callback",
                                    "type": "() => void"
                                }
                            ],
                            "returnType": "void",
                            "type": "(prop: any, prevProp: any, callback: () => void) => void"
                        }
                    ]
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "method",
                    "name": "update",
                    "inheritedFrom": "FoundationComponent.update",
                    "signatures": [
                        {
                            "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                            "kind": "signature",
                            "name": "update",
                            "parameters": [],
                            "returnType": "void",
                            "type": "() => void"
                        }
                    ]
                }
            ],
            "properties": [
                {
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": true
                    },
                    "kind": "property",
                    "name": "displayName",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L73",
                    "defaultValue": "\"LinearProgress\"",
                    "type": "string"
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": true
                    },
                    "kind": "property",
                    "name": "shouldDebounce",
                    "defaultValue": "false",
                    "inheritedFrom": "FoundationComponent.shouldDebounce",
                    "type": "boolean"
                },
                {
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "determinate",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L82",
                    "defaultValue": " null",
                    "type": "boolean | null"
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "elements",
                    "inheritedFrom": "FoundationComponent.elements",
                    "type": "{ [key: string]: FoundationElement<any, any> }"
                },
                {
                    "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": false,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "foundation",
                    "inheritedFrom": "FoundationComponent.foundation",
                    "type": "MDCLinearProgressFoundation"
                }
            ],
            "constructorType": {
                "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                "flags": {
                    "isExported": true,
                    "isExternal": false,
                    "isOptional": false,
                    "isPrivate": false,
                    "isProtected": false,
                    "isPublic": false,
                    "isRest": false,
                    "isStatic": false
                },
                "kind": "constructor",
                "name": "constructor",
                "inheritedFrom": "FoundationComponent.__constructor",
                "signatures": [
                    {
                        "fileName": "src/linear-progress/node_modules/@rmwc/base/foundation-component.tsx",
                        "kind": "signature",
                        "name": "new LinearProgress",
                        "parameters": [
                            {
                                "flags": {
                                    "isExported": false,
                                    "isExternal": false,
                                    "isOptional": false,
                                    "isPrivate": false,
                                    "isProtected": false,
                                    "isPublic": false,
                                    "isRest": false,
                                    "isStatic": false
                                },
                                "kind": "parameter",
                                "name": "props",
                                "type": "any"
                            }
                        ],
                        "returnType": "LinearProgress",
                        "type": "(props: any) => LinearProgress"
                    }
                ]
            }
        },
        "LinearProgressProps": {
            "documentation": {
                "contents": [
                    "<p>A component to display linear progress.</p>\n"
                ],
                "contentsRaw": "A component to display linear progress.",
                "metadata": {}
            },
            "fileName": "src/linear-progress/index.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "LinearProgressProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L11",
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>A Progress buffer float percentage between 0 and 1.</p>\n"
                        ],
                        "contentsRaw": "A Progress buffer float percentage between 0 and 1.",
                        "metadata": {}
                    },
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "buffer",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L15",
                    "type": "undefined | number"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Hides the progress bar. Adding / removing this prop will trigger an animation in or out.</p>\n"
                        ],
                        "contentsRaw": "Hides the progress bar. Adding / removing this prop will trigger an animation in or out.",
                        "metadata": {}
                    },
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "closed",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L19",
                    "type": "undefined | false | true"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Progress float percentage between 0 and 1.</p>\n"
                        ],
                        "contentsRaw": "Progress float percentage between 0 and 1.",
                        "metadata": {}
                    },
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "progress",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L13",
                    "type": "undefined | number"
                },
                {
                    "documentation": {
                        "contents": [
                            "<p>Progress goes from right to left.</p>\n"
                        ],
                        "contentsRaw": "Progress goes from right to left.",
                        "metadata": {}
                    },
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "reversed",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L17",
                    "type": "undefined | false | true"
                }
            ]
        },
        "DeprecatedLinearProgressProps": {
            "fileName": "src/linear-progress/index.tsx",
            "flags": {
                "isExported": true,
                "isExternal": false,
                "isOptional": false,
                "isPrivate": false,
                "isProtected": false,
                "isPublic": false,
                "isRest": false,
                "isStatic": false
            },
            "kind": "interface",
            "name": "DeprecatedLinearProgressProps",
            "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L22",
            "methods": [],
            "properties": [
                {
                    "documentation": {
                        "contents": [
                            "<p>Whether or not the Progress bar is determinate.</p>\n"
                        ],
                        "contentsRaw": "Whether or not the Progress bar is determinate.",
                        "metadata": {}
                    },
                    "fileName": "src/linear-progress/index.tsx",
                    "flags": {
                        "isExported": true,
                        "isExternal": false,
                        "isOptional": true,
                        "isPrivate": false,
                        "isProtected": false,
                        "isPublic": false,
                        "isRest": false,
                        "isStatic": false
                    },
                    "kind": "property",
                    "name": "determinate",
                    "sourceUrl": "https://github.com/jamesmfriedman/rmwc/blob/master/src/linear-progress/index.tsx#L24",
                    "type": "undefined | false | true"
                }
            ]
        }
    }
}
