"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var base_1 = require("@rmwc/base");
var ripple_1 = require("@rmwc/ripple");
var button_1 = require("@rmwc/button");
var icon_button_1 = require("@rmwc/icon-button");
/** A Card Component */
exports.Card = base_1.componentFactory({
    displayName: 'Card',
    classNames: function (props) { return [
        'mdc-card',
        {
            'mdc-card--outlined': props.outlined
        }
    ]; },
    consumeProps: ['outlined']
});
/** Media area that displays a custom background-image with background-size: cover */
exports.CardMedia = base_1.componentFactory({
    displayName: 'CardMedia',
    tag: 'section',
    classNames: function (props) { return [
        'mdc-card__media',
        {
            'mdc-card__media--square': props.square,
            'mdc-card__media--16-9': props.sixteenByNine
        }
    ]; },
    consumeProps: ['square', 'sixteenByNine']
});
/** An absolutely-positioned box the same size as the media area, for displaying a title or icon on top of the background-image */
exports.CardMediaContent = base_1.componentFactory({
    displayName: 'CardMediaContent',
    classNames: ['mdc-card__media-content']
});
/** The main clickable area for the primary content of the card */
exports.CardPrimaryAction = ripple_1.withRipple({
    surface: false
})(base_1.componentFactory({
    displayName: 'CardPrimaryAction',
    classNames: ['mdc-card__primary-action']
}));
/** Row containing action buttons and/or icons */
exports.CardActions = base_1.componentFactory({
    displayName: 'CardActions',
    tag: 'section',
    classNames: function (props) { return [
        'mdc-card__actions',
        { 'mdc-card__actions--full-bleed': props.fullBleed }
    ]; },
    consumeProps: ['fullBleed']
});
/** A group of action buttons, displayed on the left side of the card (in LTR), adjacent to CardActionIcons */
exports.CardActionButtons = base_1.componentFactory({
    displayName: 'CardActionButtons',
    classNames: ['mdc-card__action-buttons']
});
/** A group of supplemental action icons, displayed on the right side of the card (in LTR), adjacent to CardActionButtons */
exports.CardActionIcons = base_1.componentFactory({
    displayName: 'CardActionIcons',
    classNames: ['mdc-card__action-icons']
});
/** A card action Icon */
exports.CardActionIcon = base_1.componentFactory({
    displayName: 'CardActionIcon',
    tag: icon_button_1.IconButton,
    classNames: ['mdc-card__action', 'mdc-card__action--icon']
});
/** A card action Button */
exports.CardActionButton = base_1.componentFactory({
    displayName: 'CardActionButton',
    tag: button_1.Button,
    classNames: ['mdc-card__action', 'mdc-card__action--button']
});
/** DEPRECATED: A Card action Button. Depending on the props that are passed, this will either render an instance of the Button component, or the IconButton component. */
exports.CardAction = function (props) {
    /* istanbul ignore next */
    base_1.deprecationWarning('The CardAction component has been removed in favor of CardActionIcon and CardActionButton due to impossible type intersections of IconButtonProps and ButtonProps');
    return props.icon ? (
    // @ts-ignore
    React.createElement(exports.CardActionIcon, __assign({}, props))) : (React.createElement(exports.CardActionButton, __assign({}, props)));
};
exports.CardAction.displayName = 'CardAction';
