{"ast":null,"code":"var _jsxFileName = \"/Users/alexlipnik/Documents/ec2/basic-store/src/app/components/Todos/Todos.controller.tsx\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport TodoService from '../../common/services/TodoService';\nimport { AuthContext } from '../../common/context/AuthContext';\nimport Todos from './Todos';\n\nconst TodosController = () => {\n  const [todo, setTodo] = useState({\n    name: \"\"\n  });\n  const [todos, setTodos] = useState([]);\n  const [message, setMessage] = useState(null);\n  const authContext = useContext(AuthContext);\n  useEffect(() => {\n    TodoService.getTodos().then(data => {\n      setTodos(data.todos);\n    });\n  }, []);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    TodoService.postTodo(todo).then(data => {\n      const {\n        message\n      } = data;\n      resetForm();\n\n      if (!message.msgError) {\n        TodoService.getTodos().then(getData => {\n          setTodos(getData.todos);\n          setMessage(message);\n        });\n      } else if (message.msgBody === \"UnAuthorized\") {\n        setMessage(message);\n        authContext.setUser({\n          username: \"\",\n          role: \"\"\n        });\n        authContext.setIsAuthenticated(false);\n      } else {\n        setMessage(message);\n      }\n    });\n  };\n\n  const onChange = e => {\n    const target = e.target;\n    setTodo({\n      name: target.value\n    });\n  };\n\n  const resetForm = () => {\n    setTodo({\n      name: \"\"\n    });\n  };\n\n  return React.createElement(Todos, {\n    todos: todos,\n    todo: todo,\n    message: message,\n    onSubmit: onSubmit,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n};\n\nexport default TodosController;","map":{"version":3,"sources":["/Users/alexlipnik/Documents/ec2/basic-store/src/app/components/Todos/Todos.controller.tsx"],"names":["React","useState","useContext","useEffect","TodoService","AuthContext","Todos","TodosController","todo","setTodo","name","todos","setTodos","message","setMessage","authContext","getTodos","then","data","onSubmit","e","preventDefault","postTodo","resetForm","msgError","getData","msgBody","setUser","username","role","setIsAuthenticated","onChange","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,MAAMC,eAAe,GAAG,MAAM;AAC1B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC;AAACS,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAhC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMc,WAAyB,GAAGb,UAAU,CAACG,WAAD,CAA5C;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,WAAW,CAACY,QAAZ,GAAuBC,IAAvB,CAA4BC,IAAI,IAAI;AAChCN,MAAAA,QAAQ,CAACM,IAAI,CAACP,KAAN,CAAR;AACH,KAFD;AAGH,GAJQ,EAIP,EAJO,CAAT;;AAMA,QAAMQ,QAAQ,GAAIC,CAAD,IAAyC;AACtDA,IAAAA,CAAC,CAACC,cAAF;AACAjB,IAAAA,WAAW,CAACkB,QAAZ,CAAqBd,IAArB,EAA2BS,IAA3B,CAAgCC,IAAI,IAAI;AACpC,YAAM;AAACL,QAAAA;AAAD,UAAYK,IAAlB;AACAK,MAAAA,SAAS;;AAET,UAAG,CAACV,OAAO,CAACW,QAAZ,EAAsB;AAClBpB,QAAAA,WAAW,CAACY,QAAZ,GAAuBC,IAAvB,CAA4BQ,OAAO,IAAI;AACnCb,UAAAA,QAAQ,CAACa,OAAO,CAACd,KAAT,CAAR;AACAG,UAAAA,UAAU,CAACD,OAAD,CAAV;AACH,SAHD;AAIH,OALD,MAMK,IAAGA,OAAO,CAACa,OAAR,KAAoB,cAAvB,EAAsC;AACvCZ,QAAAA,UAAU,CAACD,OAAD,CAAV;AACAE,QAAAA,WAAW,CAACY,OAAZ,CAAoB;AAACC,UAAAA,QAAQ,EAAE,EAAX;AAAeC,UAAAA,IAAI,EAAE;AAArB,SAApB;AACAd,QAAAA,WAAW,CAACe,kBAAZ,CAA+B,KAA/B;AACH,OAJI,MAKA;AACDhB,QAAAA,UAAU,CAACD,OAAD,CAAV;AACH;AACJ,KAlBD;AAmBH,GArBD;;AAuBA,QAAMkB,QAAQ,GAAIX,CAAD,IAA0C;AACvD,UAAMY,MAAM,GAAGZ,CAAC,CAACY,MAAjB;AACAvB,IAAAA,OAAO,CAAC;AAACC,MAAAA,IAAI,EAAEsB,MAAM,CAACC;AAAd,KAAD,CAAP;AACH,GAHD;;AAKA,QAAMV,SAAS,GAAG,MAAM;AACpBd,IAAAA,OAAO,CAAC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAP;AACH,GAFD;;AAIA,SACI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAEC,KADX;AAEI,IAAA,IAAI,EAAEH,IAFV;AAGI,IAAA,OAAO,EAAEK,OAHb;AAII,IAAA,QAAQ,EAAEM,QAJd;AAKI,IAAA,QAAQ,EAAEY,QALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AASH,CArDD;;AAuDA,eAAexB,eAAf","sourcesContent":["import React, {useState, useContext, useEffect} from 'react';\nimport TodoService from '../../common/services/TodoService';\nimport { AuthContext } from '../../common/context/AuthContext';\nimport Todos from './Todos';\nimport { IAuthContext } from './Todos.model';\n\nconst TodosController = () => {\n    const [todo, setTodo] = useState({name: \"\"});\n    const [todos, setTodos] = useState([]);\n    const [message, setMessage] = useState(null);\n    const authContext: IAuthContext = useContext(AuthContext);\n\n    useEffect(() => {\n        TodoService.getTodos().then(data => {\n            setTodos(data.todos);\n        })\n    },[])\n\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        TodoService.postTodo(todo).then(data => {\n            const {message} = data;\n            resetForm();\n            \n            if(!message.msgError) {\n                TodoService.getTodos().then(getData => {\n                    setTodos(getData.todos);\n                    setMessage(message);\n                })\n            }\n            else if(message.msgBody === \"UnAuthorized\"){\n                setMessage(message);\n                authContext.setUser({username: \"\", role: \"\"});\n                authContext.setIsAuthenticated(false);\n            }\n            else {\n                setMessage(message);\n            }\n        })\n    } \n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n        const target = e.target as HTMLTextAreaElement;\n        setTodo({name: target.value});\n    }\n\n    const resetForm = () => {\n        setTodo({name: \"\"})\n    }\n\n    return  (\n        <Todos \n            todos={todos}\n            todo={todo}\n            message={message}\n            onSubmit={onSubmit}\n            onChange={onChange}\n        />\n    )\n}\n\nexport default TodosController;"]},"metadata":{},"sourceType":"module"}