{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCFormFieldFoundation } from './foundation';\n\nvar MDCFormField =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCFormField, _super);\n\n  function MDCFormField() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCFormField.attachTo = function (root) {\n    return new MDCFormField(root);\n  };\n\n  Object.defineProperty(MDCFormField.prototype, \"input\", {\n    get: function () {\n      return this.input_;\n    },\n    set: function (input) {\n      this.input_ = input;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCFormField.prototype, \"label_\", {\n    get: function () {\n      var LABEL_SELECTOR = MDCFormFieldFoundation.strings.LABEL_SELECTOR;\n      return this.root_.querySelector(LABEL_SELECTOR);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCFormField.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      activateInputRipple: function () {\n        if (_this.input_ && _this.input_.ripple) {\n          _this.input_.ripple.activate();\n        }\n      },\n      deactivateInputRipple: function () {\n        if (_this.input_ && _this.input_.ripple) {\n          _this.input_.ripple.deactivate();\n        }\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        if (_this.label_) {\n          _this.label_.removeEventListener(evtType, handler);\n        }\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        if (_this.label_) {\n          _this.label_.addEventListener(evtType, handler);\n        }\n      }\n    };\n    return new MDCFormFieldFoundation(adapter);\n  };\n\n  return MDCFormField;\n}(MDCComponent);\n\nexport { MDCFormField };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQ,YAAR,QAA2B,0BAA3B;AAGA,SAAQ,sBAAR,QAAqC,cAArC;;AAMA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAAlC,WAAA,YAAA,GAAA;;AA+CC;;AA9CQ,EAAA,YAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAAiC;AAC/B,WAAO,IAAI,YAAJ,CAAiB,IAAjB,CAAP;AACD,GAFM;;AAMP,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAIT,YAAA;AACE,aAAO,KAAK,MAAZ;AACD,KANQ;SAAT,UAAU,KAAV,EAA8C;AAC5C,WAAK,MAAL,GAAc,KAAd;AACD,KAFQ;oBAAA;;AAAA,GAAT;AAQA,EAAA,MAAA,CAAA,cAAA,CAAY,YAAA,CAAA,SAAZ,EAAY,QAAZ,EAAkB;SAAlB,YAAA;AACS,UAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,cAAA;AACP,aAAO,KAAK,KAAL,CAAW,aAAX,CAAyB,cAAzB,CAAP;AACD,KAHiB;oBAAA;;AAAA,GAAlB;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA,CAAA,CACE;AACA;;;AACA,QAAM,OAAO,GAAwB;AACnC,MAAA,mBAAmB,EAAE,YAAA;AACnB,YAAI,KAAI,CAAC,MAAL,IAAe,KAAI,CAAC,MAAL,CAAY,MAA/B,EAAuC;AACrC,UAAA,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,QAAnB;AACD;AACF,OALkC;AAMnC,MAAA,qBAAqB,EAAE,YAAA;AACrB,YAAI,KAAI,CAAC,MAAL,IAAe,KAAI,CAAC,MAAL,CAAY,MAA/B,EAAuC;AACrC,UAAA,KAAI,CAAC,MAAL,CAAY,MAAZ,CAAmB,UAAnB;AACD;AACF,OAVkC;AAWnC,MAAA,4BAA4B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAC7C,YAAI,KAAI,CAAC,MAAT,EAAiB;AACd,UAAA,KAAI,CAAC,MAAL,CAA4B,mBAA5B,CAAgD,OAAhD,EAAyD,OAAzD;AACF;AACF,OAfkC;AAgBnC,MAAA,0BAA0B,EAAE,UAAC,OAAD,EAAU,OAAV,EAAiB;AAC3C,YAAI,KAAI,CAAC,MAAT,EAAiB;AACd,UAAA,KAAI,CAAC,MAAL,CAA4B,gBAA5B,CAA6C,OAA7C,EAAsD,OAAtD;AACF;AACF;AApBkC,KAArC;AAsBA,WAAO,IAAI,sBAAJ,CAA2B,OAA3B,CAAP;AACD,GA1BD;;AA2BF,SAAA,YAAA;AAAC,CA/CD,CAAkC,YAAlC,CAAA","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCFormFieldFoundation } from './foundation';\nvar MDCFormField = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCFormField, _super);\n    function MDCFormField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCFormField.attachTo = function (root) {\n        return new MDCFormField(root);\n    };\n    Object.defineProperty(MDCFormField.prototype, \"input\", {\n        get: function () {\n            return this.input_;\n        },\n        set: function (input) {\n            this.input_ = input;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCFormField.prototype, \"label_\", {\n        get: function () {\n            var LABEL_SELECTOR = MDCFormFieldFoundation.strings.LABEL_SELECTOR;\n            return this.root_.querySelector(LABEL_SELECTOR);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCFormField.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            activateInputRipple: function () {\n                if (_this.input_ && _this.input_.ripple) {\n                    _this.input_.ripple.activate();\n                }\n            },\n            deactivateInputRipple: function () {\n                if (_this.input_ && _this.input_.ripple) {\n                    _this.input_.ripple.deactivate();\n                }\n            },\n            deregisterInteractionHandler: function (evtType, handler) {\n                if (_this.label_) {\n                    _this.label_.removeEventListener(evtType, handler);\n                }\n            },\n            registerInteractionHandler: function (evtType, handler) {\n                if (_this.label_) {\n                    _this.label_.addEventListener(evtType, handler);\n                }\n            },\n        };\n        return new MDCFormFieldFoundation(adapter);\n    };\n    return MDCFormField;\n}(MDCComponent));\nexport { MDCFormField };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}