{"ast":null,"code":"var _jsxFileName = \"/Users/alexlipnik/Documents/ec2/basic-store/src/app/components/Navbar/Navbar.controller.tsx\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport Navbar from './Navbar';\nimport AuthService from '../../common/services/AuthService';\nimport { AuthContext } from '../../common/context/AuthContext';\nimport authenticationConfig from '../../common/config/navbar/authenticated.json';\nimport unAuthenticationConfig from '../../common/config/navbar/unAuthenticated.json';\nimport { useLocation } from 'react-router-dom';\n\nconst NavbarController = () => {\n  const {\n    setIsAuthenticated,\n    setUser\n  } = useContext(AuthContext);\n  const [activeTab, changeTabIndex] = useState(0);\n  const {\n    isAuthenticated\n  } = useContext(AuthContext);\n  const config = isAuthenticated ? authenticationConfig : unAuthenticationConfig; // workaround to fix bug with the tab active index not working properly after clicking browser back button\n\n  useLocation(); //changing the tab index any time the browser path changes \n\n  useEffect(() => {\n    config.forEach((tab, index) => {\n      if (tab.path === window.location.pathname) {\n        changeTabIndex(index);\n      }\n    });\n  }, [window.location.pathname]);\n\n  const onClickLogOutHandler = () => {\n    AuthService.logout().then(data => {\n      if (data.success) {\n        setUser(data.user);\n        setIsAuthenticated(false);\n      }\n    });\n  };\n\n  const onTabClick = e => {\n    changeTabIndex(e.detail.index);\n  };\n\n  return React.createElement(Navbar, {\n    onTabClick: onTabClick,\n    activeTab: activeTab,\n    onClickLogOutHandler: onClickLogOutHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  });\n};\n\nexport default NavbarController;","map":{"version":3,"sources":["/Users/alexlipnik/Documents/ec2/basic-store/src/app/components/Navbar/Navbar.controller.tsx"],"names":["React","useContext","useState","useEffect","Navbar","AuthService","AuthContext","authenticationConfig","unAuthenticationConfig","useLocation","NavbarController","setIsAuthenticated","setUser","activeTab","changeTabIndex","isAuthenticated","config","forEach","tab","index","path","window","location","pathname","onClickLogOutHandler","logout","then","data","success","user","onTabClick","e","detail"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,kCAA5B;AAGA,OAAOC,oBAAP,MAAiC,+CAAjC;AACA,OAAOC,sBAAP,MAAmC,iDAAnC;AAEA,SAAQC,WAAR,QAA0B,kBAA1B;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC3B,QAAM;AAACC,IAAAA,kBAAD;AAAqBC,IAAAA;AAArB,MAAgCX,UAAU,CAACK,WAAD,CAAhD;AACA,QAAM,CAACO,SAAD,EAAYC,cAAZ,IAA8BZ,QAAQ,CAAC,CAAD,CAA5C;AAEA,QAAM;AAACa,IAAAA;AAAD,MAAoBd,UAAU,CAACK,WAAD,CAApC;AACA,QAAMU,MAAM,GAAGD,eAAe,GAAGR,oBAAH,GAA0BC,sBAAxD,CAL2B,CAO3B;;AACAC,EAAAA,WAAW,GARgB,CAU3B;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,MAAM,CAACC,OAAP,CAAe,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC3B,UAAGD,GAAG,CAACE,IAAJ,KAAaC,MAAM,CAACC,QAAP,CAAgBC,QAAhC,EAA0C;AACtCT,QAAAA,cAAc,CAACK,KAAD,CAAd;AACH;AACJ,KAJD;AAKH,GANQ,EAMN,CAACE,MAAM,CAACC,QAAP,CAAgBC,QAAjB,CANM,CAAT;;AAQA,QAAMC,oBAAoB,GAAG,MAAM;AAC/BnB,IAAAA,WAAW,CAACoB,MAAZ,GAAqBC,IAArB,CAA0BC,IAAI,IAAI;AAC9B,UAAGA,IAAI,CAACC,OAAR,EAAiB;AACbhB,QAAAA,OAAO,CAACe,IAAI,CAACE,IAAN,CAAP;AACAlB,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH;AACJ,KALD;AAMH,GAPD;;AASA,QAAMmB,UAAU,GAAIC,CAAD,IAA+B;AAC9CjB,IAAAA,cAAc,CAACiB,CAAC,CAACC,MAAF,CAASb,KAAV,CAAd;AACH,GAFD;;AAIA,SACI,oBAAC,MAAD;AACI,IAAA,UAAU,EAAEW,UADhB;AAEI,IAAA,SAAS,EAAEjB,SAFf;AAGI,IAAA,oBAAoB,EAAEW,oBAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAOH,CAvCD;;AAyCA,eAAed,gBAAf","sourcesContent":["import React, {useContext, useState, useEffect} from 'react';\nimport Navbar from './Navbar';\nimport AuthService from '../../common/services/AuthService';\nimport { AuthContext } from '../../common/context/AuthContext';\nimport { TabBarOnActivateEventT } from 'rmwc';\n\nimport authenticationConfig from '../../common/config/navbar/authenticated.json';\nimport unAuthenticationConfig from '../../common/config/navbar/unAuthenticated.json';\n\nimport {useLocation} from 'react-router-dom';\n\nconst NavbarController = () => {\n    const {setIsAuthenticated, setUser} = useContext(AuthContext);\n    const [activeTab, changeTabIndex] = useState(0);\n    \n    const {isAuthenticated} = useContext(AuthContext);\n    const config = isAuthenticated ? authenticationConfig : unAuthenticationConfig;\n\n    // workaround to fix bug with the tab active index not working properly after clicking browser back button\n    useLocation();\n\n    //changing the tab index any time the browser path changes \n    useEffect(() => {\n        config.forEach((tab, index) => {\n            if(tab.path === window.location.pathname) {\n                changeTabIndex(index)\n            }\n        })\n    }, [window.location.pathname])\n\n    const onClickLogOutHandler = () => {\n        AuthService.logout().then(data => {\n            if(data.success) {\n                setUser(data.user);\n                setIsAuthenticated(false);\n            }\n        })\n    }\n\n    const onTabClick = (e: TabBarOnActivateEventT) => {\n        changeTabIndex(e.detail.index)\n    }\n\n    return (\n        <Navbar\n            onTabClick={onTabClick}\n            activeTab={activeTab}\n            onClickLogOutHandler={onClickLogOutHandler}\n        />\n    )\n};\n\nexport default NavbarController;"]},"metadata":{},"sourceType":"module"}