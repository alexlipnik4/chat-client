{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar emptyClientRect = {\n  bottom: 0,\n  height: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n  width: 0\n};\n\nvar MDCChipFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChipFoundation, _super);\n\n  function MDCChipFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCChipFoundation.defaultAdapter, adapter)) || this;\n    /**\n     * Whether a trailing icon click should immediately trigger exit/removal of the chip.\n     */\n\n\n    _this.shouldRemoveOnTrailingIconClick_ = true;\n    return _this;\n  }\n\n  Object.defineProperty(MDCChipFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        addClassToLeadingIcon: function () {\n          return undefined;\n        },\n        eventTargetHasClass: function () {\n          return false;\n        },\n        getCheckmarkBoundingClientRect: function () {\n          return emptyClientRect;\n        },\n        getComputedStyleValue: function () {\n          return '';\n        },\n        getRootBoundingClientRect: function () {\n          return emptyClientRect;\n        },\n        hasClass: function () {\n          return false;\n        },\n        hasLeadingIcon: function () {\n          return false;\n        },\n        notifyInteraction: function () {\n          return undefined;\n        },\n        notifyRemoval: function () {\n          return undefined;\n        },\n        notifySelection: function () {\n          return undefined;\n        },\n        notifyTrailingIconInteraction: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        removeClassFromLeadingIcon: function () {\n          return undefined;\n        },\n        setAttr: function () {\n          return undefined;\n        },\n        setStyleProperty: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCChipFoundation.prototype.isSelected = function () {\n    return this.adapter_.hasClass(cssClasses.SELECTED);\n  };\n\n  MDCChipFoundation.prototype.setSelected = function (selected) {\n    if (selected) {\n      this.adapter_.addClass(cssClasses.SELECTED);\n      this.adapter_.setAttr(strings.ARIA_CHECKED, 'true');\n    } else {\n      this.adapter_.removeClass(cssClasses.SELECTED);\n      this.adapter_.setAttr(strings.ARIA_CHECKED, 'false');\n    }\n\n    this.adapter_.notifySelection(selected);\n  };\n\n  MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {\n    return this.shouldRemoveOnTrailingIconClick_;\n  };\n\n  MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {\n    this.shouldRemoveOnTrailingIconClick_ = shouldRemove;\n  };\n\n  MDCChipFoundation.prototype.getDimensions = function () {\n    var _this = this;\n\n    var getRootRect = function () {\n      return _this.adapter_.getRootBoundingClientRect();\n    };\n\n    var getCheckmarkRect = function () {\n      return _this.adapter_.getCheckmarkBoundingClientRect();\n    }; // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current\n    // size of the checkmark.\n\n\n    if (!this.adapter_.hasLeadingIcon()) {\n      var checkmarkRect = getCheckmarkRect();\n\n      if (checkmarkRect) {\n        var rootRect = getRootRect(); // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.\n        // However, the checkbox is initially hidden by setting the width to 0.\n        // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)\n        // when adding it to the root client rect's width.\n\n        return {\n          bottom: rootRect.bottom,\n          height: rootRect.height,\n          left: rootRect.left,\n          right: rootRect.right,\n          top: rootRect.top,\n          width: rootRect.width + checkmarkRect.height\n        };\n      }\n    }\n\n    return getRootRect();\n  };\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n\n\n  MDCChipFoundation.prototype.beginExit = function () {\n    this.adapter_.addClass(cssClasses.CHIP_EXIT);\n  };\n  /**\n   * Handles an interaction event on the root element.\n   */\n\n\n  MDCChipFoundation.prototype.handleInteraction = function (evt) {\n    var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n\n    if (evt.type === 'click' || isEnter) {\n      this.adapter_.notifyInteraction();\n    }\n  };\n  /**\n   * Handles a transition end event on the root element.\n   */\n\n\n  MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {\n    var _this = this; // Handle transition end event on the chip when it is about to be removed.\n\n\n    if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.CHIP_EXIT)) {\n      if (evt.propertyName === 'width') {\n        this.adapter_.notifyRemoval();\n      } else if (evt.propertyName === 'opacity') {\n        // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5\n        var chipWidth_1 = this.adapter_.getComputedStyleValue('width'); // On the next frame (once we get the computed width), explicitly set the chip's width\n        // to its current pixel width, so we aren't transitioning out of 'auto'.\n\n        requestAnimationFrame(function () {\n          _this.adapter_.setStyleProperty('width', chipWidth_1); // To mitigate jitter, start transitioning padding and margin before width.\n\n\n          _this.adapter_.setStyleProperty('padding', '0');\n\n          _this.adapter_.setStyleProperty('margin', '0'); // On the next frame (once width is explicitly set), transition width to 0.\n\n\n          requestAnimationFrame(function () {\n            _this.adapter_.setStyleProperty('width', '0');\n          });\n        });\n      }\n\n      return;\n    } // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.\n\n\n    if (evt.propertyName !== 'opacity') {\n      return;\n    }\n\n    if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.LEADING_ICON) && this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    } else if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.CHECKMARK) && !this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    }\n  };\n  /**\n   * Handles an interaction event on the trailing icon element. This is used to\n   * prevent the ripple from activating on interaction with the trailing icon.\n   */\n\n\n  MDCChipFoundation.prototype.handleTrailingIconInteraction = function (evt) {\n    var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n    evt.stopPropagation();\n\n    if (evt.type === 'click' || isEnter) {\n      this.adapter_.notifyTrailingIconInteraction();\n\n      if (this.shouldRemoveOnTrailingIconClick_) {\n        this.beginExit();\n      }\n    }\n  };\n\n  return MDCChipFoundation;\n}(MDCFoundation);\n\nexport { MDCChipFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCChipFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar emptyClientRect = {\n    bottom: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    width: 0,\n};\nvar MDCChipFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCChipFoundation, _super);\n    function MDCChipFoundation(adapter) {\n        var _this = _super.call(this, tslib_1.__assign({}, MDCChipFoundation.defaultAdapter, adapter)) || this;\n        /**\n         * Whether a trailing icon click should immediately trigger exit/removal of the chip.\n         */\n        _this.shouldRemoveOnTrailingIconClick_ = true;\n        return _this;\n    }\n    Object.defineProperty(MDCChipFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                addClass: function () { return undefined; },\n                addClassToLeadingIcon: function () { return undefined; },\n                eventTargetHasClass: function () { return false; },\n                getCheckmarkBoundingClientRect: function () { return emptyClientRect; },\n                getComputedStyleValue: function () { return ''; },\n                getRootBoundingClientRect: function () { return emptyClientRect; },\n                hasClass: function () { return false; },\n                hasLeadingIcon: function () { return false; },\n                notifyInteraction: function () { return undefined; },\n                notifyRemoval: function () { return undefined; },\n                notifySelection: function () { return undefined; },\n                notifyTrailingIconInteraction: function () { return undefined; },\n                removeClass: function () { return undefined; },\n                removeClassFromLeadingIcon: function () { return undefined; },\n                setAttr: function () { return undefined; },\n                setStyleProperty: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCChipFoundation.prototype.isSelected = function () {\n        return this.adapter_.hasClass(cssClasses.SELECTED);\n    };\n    MDCChipFoundation.prototype.setSelected = function (selected) {\n        if (selected) {\n            this.adapter_.addClass(cssClasses.SELECTED);\n            this.adapter_.setAttr(strings.ARIA_CHECKED, 'true');\n        }\n        else {\n            this.adapter_.removeClass(cssClasses.SELECTED);\n            this.adapter_.setAttr(strings.ARIA_CHECKED, 'false');\n        }\n        this.adapter_.notifySelection(selected);\n    };\n    MDCChipFoundation.prototype.getShouldRemoveOnTrailingIconClick = function () {\n        return this.shouldRemoveOnTrailingIconClick_;\n    };\n    MDCChipFoundation.prototype.setShouldRemoveOnTrailingIconClick = function (shouldRemove) {\n        this.shouldRemoveOnTrailingIconClick_ = shouldRemove;\n    };\n    MDCChipFoundation.prototype.getDimensions = function () {\n        var _this = this;\n        var getRootRect = function () { return _this.adapter_.getRootBoundingClientRect(); };\n        var getCheckmarkRect = function () { return _this.adapter_.getCheckmarkBoundingClientRect(); };\n        // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current\n        // size of the checkmark.\n        if (!this.adapter_.hasLeadingIcon()) {\n            var checkmarkRect = getCheckmarkRect();\n            if (checkmarkRect) {\n                var rootRect = getRootRect();\n                // Checkmark is a square, meaning the client rect's width and height are identical once the animation completes.\n                // However, the checkbox is initially hidden by setting the width to 0.\n                // To account for an initial width of 0, we use the checkbox's height instead (which equals the end-state width)\n                // when adding it to the root client rect's width.\n                return {\n                    bottom: rootRect.bottom,\n                    height: rootRect.height,\n                    left: rootRect.left,\n                    right: rootRect.right,\n                    top: rootRect.top,\n                    width: rootRect.width + checkmarkRect.height,\n                };\n            }\n        }\n        return getRootRect();\n    };\n    /**\n     * Begins the exit animation which leads to removal of the chip.\n     */\n    MDCChipFoundation.prototype.beginExit = function () {\n        this.adapter_.addClass(cssClasses.CHIP_EXIT);\n    };\n    /**\n     * Handles an interaction event on the root element.\n     */\n    MDCChipFoundation.prototype.handleInteraction = function (evt) {\n        var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n        if (evt.type === 'click' || isEnter) {\n            this.adapter_.notifyInteraction();\n        }\n    };\n    /**\n     * Handles a transition end event on the root element.\n     */\n    MDCChipFoundation.prototype.handleTransitionEnd = function (evt) {\n        var _this = this;\n        // Handle transition end event on the chip when it is about to be removed.\n        if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.CHIP_EXIT)) {\n            if (evt.propertyName === 'width') {\n                this.adapter_.notifyRemoval();\n            }\n            else if (evt.propertyName === 'opacity') {\n                // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5\n                var chipWidth_1 = this.adapter_.getComputedStyleValue('width');\n                // On the next frame (once we get the computed width), explicitly set the chip's width\n                // to its current pixel width, so we aren't transitioning out of 'auto'.\n                requestAnimationFrame(function () {\n                    _this.adapter_.setStyleProperty('width', chipWidth_1);\n                    // To mitigate jitter, start transitioning padding and margin before width.\n                    _this.adapter_.setStyleProperty('padding', '0');\n                    _this.adapter_.setStyleProperty('margin', '0');\n                    // On the next frame (once width is explicitly set), transition width to 0.\n                    requestAnimationFrame(function () {\n                        _this.adapter_.setStyleProperty('width', '0');\n                    });\n                });\n            }\n            return;\n        }\n        // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.\n        if (evt.propertyName !== 'opacity') {\n            return;\n        }\n        if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.LEADING_ICON) &&\n            this.adapter_.hasClass(cssClasses.SELECTED)) {\n            this.adapter_.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n        }\n        else if (this.adapter_.eventTargetHasClass(evt.target, cssClasses.CHECKMARK) &&\n            !this.adapter_.hasClass(cssClasses.SELECTED)) {\n            this.adapter_.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n        }\n    };\n    /**\n     * Handles an interaction event on the trailing icon element. This is used to\n     * prevent the ripple from activating on interaction with the trailing icon.\n     */\n    MDCChipFoundation.prototype.handleTrailingIconInteraction = function (evt) {\n        var isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n        evt.stopPropagation();\n        if (evt.type === 'click' || isEnter) {\n            this.adapter_.notifyTrailingIconInteraction();\n            if (this.shouldRemoveOnTrailingIconClick_) {\n                this.beginExit();\n            }\n        }\n    };\n    return MDCChipFoundation;\n}(MDCFoundation));\nexport { MDCChipFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCChipFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}