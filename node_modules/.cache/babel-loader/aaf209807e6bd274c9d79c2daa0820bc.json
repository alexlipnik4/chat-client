{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { strings } from './constants';\nimport { MDCSnackbarFoundation } from './foundation';\nimport * as util from './util';\nvar SURFACE_SELECTOR = strings.SURFACE_SELECTOR,\n    LABEL_SELECTOR = strings.LABEL_SELECTOR,\n    ACTION_SELECTOR = strings.ACTION_SELECTOR,\n    DISMISS_SELECTOR = strings.DISMISS_SELECTOR,\n    OPENING_EVENT = strings.OPENING_EVENT,\n    OPENED_EVENT = strings.OPENED_EVENT,\n    CLOSING_EVENT = strings.CLOSING_EVENT,\n    CLOSED_EVENT = strings.CLOSED_EVENT;\n\nvar MDCSnackbar =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCSnackbar, _super);\n\n  function MDCSnackbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCSnackbar.attachTo = function (root) {\n    return new MDCSnackbar(root);\n  };\n\n  MDCSnackbar.prototype.initialize = function (announcerFactory) {\n    if (announcerFactory === void 0) {\n      announcerFactory = function () {\n        return util.announce;\n      };\n    }\n\n    this.announce_ = announcerFactory();\n  };\n\n  MDCSnackbar.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.surfaceEl_ = this.root_.querySelector(SURFACE_SELECTOR);\n    this.labelEl_ = this.root_.querySelector(LABEL_SELECTOR);\n    this.actionEl_ = this.root_.querySelector(ACTION_SELECTOR);\n\n    this.handleKeyDown_ = function (evt) {\n      return _this.foundation_.handleKeyDown(evt);\n    };\n\n    this.handleSurfaceClick_ = function (evt) {\n      var target = evt.target;\n\n      if (_this.isActionButton_(target)) {\n        _this.foundation_.handleActionButtonClick(evt);\n      } else if (_this.isActionIcon_(target)) {\n        _this.foundation_.handleActionIconClick(evt);\n      }\n    };\n\n    this.registerKeyDownHandler_(this.handleKeyDown_);\n    this.registerSurfaceClickHandler_(this.handleSurfaceClick_);\n  };\n\n  MDCSnackbar.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.deregisterKeyDownHandler_(this.handleKeyDown_);\n    this.deregisterSurfaceClickHandler_(this.handleSurfaceClick_);\n  };\n\n  MDCSnackbar.prototype.open = function () {\n    this.foundation_.open();\n  };\n  /**\n   * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the\n   *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom\n   *     client-specific values may also be used if desired.\n   */\n\n\n  MDCSnackbar.prototype.close = function (reason) {\n    if (reason === void 0) {\n      reason = '';\n    }\n\n    this.foundation_.close(reason);\n  };\n\n  MDCSnackbar.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      addClass: function (className) {\n        return _this.root_.classList.add(className);\n      },\n      announce: function () {\n        return _this.announce_(_this.labelEl_);\n      },\n      notifyClosed: function (reason) {\n        return _this.emit(CLOSED_EVENT, reason ? {\n          reason: reason\n        } : {});\n      },\n      notifyClosing: function (reason) {\n        return _this.emit(CLOSING_EVENT, reason ? {\n          reason: reason\n        } : {});\n      },\n      notifyOpened: function () {\n        return _this.emit(OPENED_EVENT, {});\n      },\n      notifyOpening: function () {\n        return _this.emit(OPENING_EVENT, {});\n      },\n      removeClass: function (className) {\n        return _this.root_.classList.remove(className);\n      }\n    };\n    return new MDCSnackbarFoundation(adapter);\n  };\n\n  Object.defineProperty(MDCSnackbar.prototype, \"timeoutMs\", {\n    get: function () {\n      return this.foundation_.getTimeoutMs();\n    },\n    set: function (timeoutMs) {\n      this.foundation_.setTimeoutMs(timeoutMs);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"closeOnEscape\", {\n    get: function () {\n      return this.foundation_.getCloseOnEscape();\n    },\n    set: function (closeOnEscape) {\n      this.foundation_.setCloseOnEscape(closeOnEscape);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"isOpen\", {\n    get: function () {\n      return this.foundation_.isOpen();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"labelText\", {\n    get: function () {\n      // This property only returns null if the node is a document, DOCTYPE, or notation.\n      // On Element nodes, it always returns a string.\n      return this.labelEl_.textContent;\n    },\n    set: function (labelText) {\n      this.labelEl_.textContent = labelText;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCSnackbar.prototype, \"actionButtonText\", {\n    get: function () {\n      return this.actionEl_.textContent;\n    },\n    set: function (actionButtonText) {\n      this.actionEl_.textContent = actionButtonText;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MDCSnackbar.prototype.registerKeyDownHandler_ = function (handler) {\n    this.listen('keydown', handler);\n  };\n\n  MDCSnackbar.prototype.deregisterKeyDownHandler_ = function (handler) {\n    this.unlisten('keydown', handler);\n  };\n\n  MDCSnackbar.prototype.registerSurfaceClickHandler_ = function (handler) {\n    this.surfaceEl_.addEventListener('click', handler);\n  };\n\n  MDCSnackbar.prototype.deregisterSurfaceClickHandler_ = function (handler) {\n    this.surfaceEl_.removeEventListener('click', handler);\n  };\n\n  MDCSnackbar.prototype.isActionButton_ = function (target) {\n    return Boolean(closest(target, ACTION_SELECTOR));\n  };\n\n  MDCSnackbar.prototype.isActionIcon_ = function (target) {\n    return Boolean(closest(target, DISMISS_SELECTOR));\n  };\n\n  return MDCSnackbar;\n}(MDCComponent);\n\nexport { MDCSnackbar };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { closest } from '@material/dom/ponyfill';\nimport { strings } from './constants';\nimport { MDCSnackbarFoundation } from './foundation';\nimport * as util from './util';\nvar SURFACE_SELECTOR = strings.SURFACE_SELECTOR, LABEL_SELECTOR = strings.LABEL_SELECTOR, ACTION_SELECTOR = strings.ACTION_SELECTOR, DISMISS_SELECTOR = strings.DISMISS_SELECTOR, OPENING_EVENT = strings.OPENING_EVENT, OPENED_EVENT = strings.OPENED_EVENT, CLOSING_EVENT = strings.CLOSING_EVENT, CLOSED_EVENT = strings.CLOSED_EVENT;\nvar MDCSnackbar = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCSnackbar, _super);\n    function MDCSnackbar() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCSnackbar.attachTo = function (root) {\n        return new MDCSnackbar(root);\n    };\n    MDCSnackbar.prototype.initialize = function (announcerFactory) {\n        if (announcerFactory === void 0) { announcerFactory = function () { return util.announce; }; }\n        this.announce_ = announcerFactory();\n    };\n    MDCSnackbar.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.surfaceEl_ = this.root_.querySelector(SURFACE_SELECTOR);\n        this.labelEl_ = this.root_.querySelector(LABEL_SELECTOR);\n        this.actionEl_ = this.root_.querySelector(ACTION_SELECTOR);\n        this.handleKeyDown_ = function (evt) { return _this.foundation_.handleKeyDown(evt); };\n        this.handleSurfaceClick_ = function (evt) {\n            var target = evt.target;\n            if (_this.isActionButton_(target)) {\n                _this.foundation_.handleActionButtonClick(evt);\n            }\n            else if (_this.isActionIcon_(target)) {\n                _this.foundation_.handleActionIconClick(evt);\n            }\n        };\n        this.registerKeyDownHandler_(this.handleKeyDown_);\n        this.registerSurfaceClickHandler_(this.handleSurfaceClick_);\n    };\n    MDCSnackbar.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.deregisterKeyDownHandler_(this.handleKeyDown_);\n        this.deregisterSurfaceClickHandler_(this.handleSurfaceClick_);\n    };\n    MDCSnackbar.prototype.open = function () {\n        this.foundation_.open();\n    };\n    /**\n     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the\n     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom\n     *     client-specific values may also be used if desired.\n     */\n    MDCSnackbar.prototype.close = function (reason) {\n        if (reason === void 0) { reason = ''; }\n        this.foundation_.close(reason);\n    };\n    MDCSnackbar.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            addClass: function (className) { return _this.root_.classList.add(className); },\n            announce: function () { return _this.announce_(_this.labelEl_); },\n            notifyClosed: function (reason) { return _this.emit(CLOSED_EVENT, reason ? { reason: reason } : {}); },\n            notifyClosing: function (reason) { return _this.emit(CLOSING_EVENT, reason ? { reason: reason } : {}); },\n            notifyOpened: function () { return _this.emit(OPENED_EVENT, {}); },\n            notifyOpening: function () { return _this.emit(OPENING_EVENT, {}); },\n            removeClass: function (className) { return _this.root_.classList.remove(className); },\n        };\n        return new MDCSnackbarFoundation(adapter);\n    };\n    Object.defineProperty(MDCSnackbar.prototype, \"timeoutMs\", {\n        get: function () {\n            return this.foundation_.getTimeoutMs();\n        },\n        set: function (timeoutMs) {\n            this.foundation_.setTimeoutMs(timeoutMs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbar.prototype, \"closeOnEscape\", {\n        get: function () {\n            return this.foundation_.getCloseOnEscape();\n        },\n        set: function (closeOnEscape) {\n            this.foundation_.setCloseOnEscape(closeOnEscape);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbar.prototype, \"isOpen\", {\n        get: function () {\n            return this.foundation_.isOpen();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbar.prototype, \"labelText\", {\n        get: function () {\n            // This property only returns null if the node is a document, DOCTYPE, or notation.\n            // On Element nodes, it always returns a string.\n            return this.labelEl_.textContent;\n        },\n        set: function (labelText) {\n            this.labelEl_.textContent = labelText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCSnackbar.prototype, \"actionButtonText\", {\n        get: function () {\n            return this.actionEl_.textContent;\n        },\n        set: function (actionButtonText) {\n            this.actionEl_.textContent = actionButtonText;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MDCSnackbar.prototype.registerKeyDownHandler_ = function (handler) {\n        this.listen('keydown', handler);\n    };\n    MDCSnackbar.prototype.deregisterKeyDownHandler_ = function (handler) {\n        this.unlisten('keydown', handler);\n    };\n    MDCSnackbar.prototype.registerSurfaceClickHandler_ = function (handler) {\n        this.surfaceEl_.addEventListener('click', handler);\n    };\n    MDCSnackbar.prototype.deregisterSurfaceClickHandler_ = function (handler) {\n        this.surfaceEl_.removeEventListener('click', handler);\n    };\n    MDCSnackbar.prototype.isActionButton_ = function (target) {\n        return Boolean(closest(target, ACTION_SELECTOR));\n    };\n    MDCSnackbar.prototype.isActionIcon_ = function (target) {\n        return Boolean(closest(target, DISMISS_SELECTOR));\n    };\n    return MDCSnackbar;\n}(MDCComponent));\nexport { MDCSnackbar };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}