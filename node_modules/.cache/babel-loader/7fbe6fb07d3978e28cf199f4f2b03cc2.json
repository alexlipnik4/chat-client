{"ast":null,"code":"export default {\n  getTodos: () => {\n    return fetch('/user/todos').then(response => {\n      if (response.status !== 401) {\n        return response.json().then(data => data);\n      } else {\n        return {\n          message: {\n            msgBody: \"unAuthorized\",\n            msgError: true\n          }\n        };\n      }\n    });\n  },\n  postTodo: todo => {\n    return fetch('/user/todo', {\n      method: \"post\",\n      body: JSON.stringify(todo),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.status !== 401) {\n        return response.json().then(data => data);\n      } else {\n        return {\n          message: {\n            msgBody: \"unAuthorized\",\n            msgError: true\n          }\n        };\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/alexlipnik/Documents/ec2/basic-store/src/app/common/services/TodoService.tsx"],"names":["getTodos","fetch","then","response","status","json","data","message","msgBody","msgError","postTodo","todo","method","body","JSON","stringify","headers"],"mappings":"AAAA,eAAe;AACXA,EAAAA,QAAQ,EAAG,MAAM;AACb,WAAOC,KAAK,CAAC,aAAD,CAAL,CAAqBC,IAArB,CAA0BC,QAAQ,IAAI;AACzC,UAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxB,eAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,IAAI,IAAIA,IAA7B,CAAP;AACH,OAFD,MAGK;AACD,eAAO;AAACC,UAAAA,OAAO,EAAE;AAACC,YAAAA,OAAO,EAAE,cAAV;AAA0BC,YAAAA,QAAQ,EAAE;AAApC;AAAV,SAAP;AACH;AACJ,KAPM,CAAP;AAQH,GAVU;AAWXC,EAAAA,QAAQ,EAAIC,IAAD,IAAe;AACtB,WAAOV,KAAK,CAAC,YAAD,EAAe;AACvBW,MAAAA,MAAM,EAAE,MADe;AAEvBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFiB;AAGvBK,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHc,KAAf,CAAL,CAMJd,IANI,CAMCC,QAAQ,IAAI;AAChB,UAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxB,eAAOD,QAAQ,CAACE,IAAT,GAAgBH,IAAhB,CAAqBI,IAAI,IAAIA,IAA7B,CAAP;AACH,OAFD,MAGK;AACD,eAAO;AAACC,UAAAA,OAAO,EAAE;AAACC,YAAAA,OAAO,EAAE,cAAV;AAA0BC,YAAAA,QAAQ,EAAE;AAApC;AAAV,SAAP;AACH;AACJ,KAbM,CAAP;AAcH;AA1BU,CAAf","sourcesContent":["export default {\n    getTodos : () => {\n        return fetch('/user/todos').then(response => {\n            if(response.status !== 401) {\n                return response.json().then(data => data);\n            }\n            else {\n                return {message: {msgBody: \"unAuthorized\", msgError: true}}\n            }\n        })\n    },\n    postTodo : (todo: any) => {\n        return fetch('/user/todo', {\n            method: \"post\",\n            body: JSON.stringify(todo),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            if(response.status !== 401) {\n                return response.json().then(data => data)\n            }\n            else {\n                return {message: {msgBody: \"unAuthorized\", msgError: true}}\n            }\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}