{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCChip } from '../chip/component';\nimport { MDCChipFoundation } from '../chip/foundation';\nimport { MDCChipSetFoundation } from './foundation';\nvar _a = MDCChipFoundation.strings,\n    INTERACTION_EVENT = _a.INTERACTION_EVENT,\n    SELECTION_EVENT = _a.SELECTION_EVENT,\n    REMOVAL_EVENT = _a.REMOVAL_EVENT;\nvar CHIP_SELECTOR = MDCChipSetFoundation.strings.CHIP_SELECTOR;\nvar idCounter = 0;\n\nvar MDCChipSet =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChipSet, _super);\n\n  function MDCChipSet() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MDCChipSet.attachTo = function (root) {\n    return new MDCChipSet(root);\n  };\n\n  Object.defineProperty(MDCChipSet.prototype, \"chips\", {\n    get: function () {\n      return this.chips_.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSet.prototype, \"selectedChipIds\", {\n    /**\n     * @return An array of the IDs of all selected chips.\n     */\n    get: function () {\n      return this.foundation_.getSelectedChipIds();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @param chipFactory A function which creates a new MDCChip.\n   */\n\n  MDCChipSet.prototype.initialize = function (chipFactory) {\n    if (chipFactory === void 0) {\n      chipFactory = function (el) {\n        return new MDCChip(el);\n      };\n    }\n\n    this.chipFactory_ = chipFactory;\n    this.chips_ = this.instantiateChips_(this.chipFactory_);\n  };\n\n  MDCChipSet.prototype.initialSyncWithDOM = function () {\n    var _this = this;\n\n    this.chips_.forEach(function (chip) {\n      if (chip.id && chip.selected) {\n        _this.foundation_.select(chip.id);\n      }\n    });\n\n    this.handleChipInteraction_ = function (evt) {\n      return _this.foundation_.handleChipInteraction(evt.detail.chipId);\n    };\n\n    this.handleChipSelection_ = function (evt) {\n      return _this.foundation_.handleChipSelection(evt.detail.chipId, evt.detail.selected);\n    };\n\n    this.handleChipRemoval_ = function (evt) {\n      return _this.foundation_.handleChipRemoval(evt.detail.chipId);\n    };\n\n    this.listen(INTERACTION_EVENT, this.handleChipInteraction_);\n    this.listen(SELECTION_EVENT, this.handleChipSelection_);\n    this.listen(REMOVAL_EVENT, this.handleChipRemoval_);\n  };\n\n  MDCChipSet.prototype.destroy = function () {\n    this.chips_.forEach(function (chip) {\n      chip.destroy();\n    });\n    this.unlisten(INTERACTION_EVENT, this.handleChipInteraction_);\n    this.unlisten(SELECTION_EVENT, this.handleChipSelection_);\n    this.unlisten(REMOVAL_EVENT, this.handleChipRemoval_);\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Adds a new chip object to the chip set from the given chip element.\n   */\n\n\n  MDCChipSet.prototype.addChip = function (chipEl) {\n    chipEl.id = chipEl.id || \"mdc-chip-\" + ++idCounter;\n    this.chips_.push(this.chipFactory_(chipEl));\n  };\n\n  MDCChipSet.prototype.getDefaultFoundation = function () {\n    var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n    // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n\n\n    var adapter = {\n      hasClass: function (className) {\n        return _this.root_.classList.contains(className);\n      },\n      removeChip: function (chipId) {\n        var index = _this.findChipIndex_(chipId);\n\n        if (index >= 0) {\n          _this.chips_[index].destroy();\n\n          _this.chips_.splice(index, 1);\n        }\n      },\n      setSelected: function (chipId, selected) {\n        var index = _this.findChipIndex_(chipId);\n\n        if (index >= 0) {\n          _this.chips_[index].selected = selected;\n        }\n      }\n    };\n    return new MDCChipSetFoundation(adapter);\n  };\n  /**\n   * Instantiates chip components on all of the chip set's child chip elements.\n   */\n\n\n  MDCChipSet.prototype.instantiateChips_ = function (chipFactory) {\n    var chipElements = [].slice.call(this.root_.querySelectorAll(CHIP_SELECTOR));\n    return chipElements.map(function (el) {\n      el.id = el.id || \"mdc-chip-\" + ++idCounter;\n      return chipFactory(el);\n    });\n  };\n  /**\n   * Returns the index of the chip with the given id, or -1 if the chip does not exist.\n   */\n\n\n  MDCChipSet.prototype.findChipIndex_ = function (chipId) {\n    for (var i = 0; i < this.chips_.length; i++) {\n      if (this.chips_[i].id === chipId) {\n        return i;\n      }\n    }\n\n    return -1;\n  };\n\n  return MDCChipSet;\n}(MDCComponent);\n\nexport { MDCChipSet };","map":{"version":3,"sources":["component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { MDCChip } from '../chip/component';\nimport { MDCChipFoundation } from '../chip/foundation';\nimport { MDCChipSetFoundation } from './foundation';\nvar _a = MDCChipFoundation.strings, INTERACTION_EVENT = _a.INTERACTION_EVENT, SELECTION_EVENT = _a.SELECTION_EVENT, REMOVAL_EVENT = _a.REMOVAL_EVENT;\nvar CHIP_SELECTOR = MDCChipSetFoundation.strings.CHIP_SELECTOR;\nvar idCounter = 0;\nvar MDCChipSet = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCChipSet, _super);\n    function MDCChipSet() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCChipSet.attachTo = function (root) {\n        return new MDCChipSet(root);\n    };\n    Object.defineProperty(MDCChipSet.prototype, \"chips\", {\n        get: function () {\n            return this.chips_.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipSet.prototype, \"selectedChipIds\", {\n        /**\n         * @return An array of the IDs of all selected chips.\n         */\n        get: function () {\n            return this.foundation_.getSelectedChipIds();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param chipFactory A function which creates a new MDCChip.\n     */\n    MDCChipSet.prototype.initialize = function (chipFactory) {\n        if (chipFactory === void 0) { chipFactory = function (el) { return new MDCChip(el); }; }\n        this.chipFactory_ = chipFactory;\n        this.chips_ = this.instantiateChips_(this.chipFactory_);\n    };\n    MDCChipSet.prototype.initialSyncWithDOM = function () {\n        var _this = this;\n        this.chips_.forEach(function (chip) {\n            if (chip.id && chip.selected) {\n                _this.foundation_.select(chip.id);\n            }\n        });\n        this.handleChipInteraction_ = function (evt) { return _this.foundation_.handleChipInteraction(evt.detail.chipId); };\n        this.handleChipSelection_ = function (evt) { return _this.foundation_.handleChipSelection(evt.detail.chipId, evt.detail.selected); };\n        this.handleChipRemoval_ = function (evt) { return _this.foundation_.handleChipRemoval(evt.detail.chipId); };\n        this.listen(INTERACTION_EVENT, this.handleChipInteraction_);\n        this.listen(SELECTION_EVENT, this.handleChipSelection_);\n        this.listen(REMOVAL_EVENT, this.handleChipRemoval_);\n    };\n    MDCChipSet.prototype.destroy = function () {\n        this.chips_.forEach(function (chip) {\n            chip.destroy();\n        });\n        this.unlisten(INTERACTION_EVENT, this.handleChipInteraction_);\n        this.unlisten(SELECTION_EVENT, this.handleChipSelection_);\n        this.unlisten(REMOVAL_EVENT, this.handleChipRemoval_);\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Adds a new chip object to the chip set from the given chip element.\n     */\n    MDCChipSet.prototype.addChip = function (chipEl) {\n        chipEl.id = chipEl.id || \"mdc-chip-\" + ++idCounter;\n        this.chips_.push(this.chipFactory_(chipEl));\n    };\n    MDCChipSet.prototype.getDefaultFoundation = function () {\n        var _this = this;\n        // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.\n        // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.\n        var adapter = {\n            hasClass: function (className) { return _this.root_.classList.contains(className); },\n            removeChip: function (chipId) {\n                var index = _this.findChipIndex_(chipId);\n                if (index >= 0) {\n                    _this.chips_[index].destroy();\n                    _this.chips_.splice(index, 1);\n                }\n            },\n            setSelected: function (chipId, selected) {\n                var index = _this.findChipIndex_(chipId);\n                if (index >= 0) {\n                    _this.chips_[index].selected = selected;\n                }\n            },\n        };\n        return new MDCChipSetFoundation(adapter);\n    };\n    /**\n     * Instantiates chip components on all of the chip set's child chip elements.\n     */\n    MDCChipSet.prototype.instantiateChips_ = function (chipFactory) {\n        var chipElements = [].slice.call(this.root_.querySelectorAll(CHIP_SELECTOR));\n        return chipElements.map(function (el) {\n            el.id = el.id || \"mdc-chip-\" + ++idCounter;\n            return chipFactory(el);\n        });\n    };\n    /**\n     * Returns the index of the chip with the given id, or -1 if the chip does not exist.\n     */\n    MDCChipSet.prototype.findChipIndex_ = function (chipId) {\n        for (var i = 0; i < this.chips_.length; i++) {\n            if (this.chips_[i].id === chipId) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    return MDCChipSet;\n}(MDCComponent));\nexport { MDCChipSet };\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"module"}