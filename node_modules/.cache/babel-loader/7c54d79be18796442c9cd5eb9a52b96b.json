{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\n\nvar MDCChipSetFoundation =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MDCChipSetFoundation, _super);\n\n  function MDCChipSetFoundation(adapter) {\n    var _this = _super.call(this, tslib_1.__assign({}, MDCChipSetFoundation.defaultAdapter, adapter)) || this;\n    /**\n     * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n     */\n\n\n    _this.selectedChipIds_ = [];\n    return _this;\n  }\n\n  Object.defineProperty(MDCChipSetFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSetFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MDCChipSetFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        hasClass: function () {\n          return false;\n        },\n        removeChip: function () {\n          return undefined;\n        },\n        setSelected: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Returns an array of the IDs of all selected chips.\n   */\n\n  MDCChipSetFoundation.prototype.getSelectedChipIds = function () {\n    return this.selectedChipIds_.slice();\n  };\n  /**\n   * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n   */\n\n\n  MDCChipSetFoundation.prototype.select = function (chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      return;\n    }\n\n    if (this.adapter_.hasClass(cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {\n      var previouslySelectedChip = this.selectedChipIds_[0];\n      this.selectedChipIds_.length = 0;\n      this.adapter_.setSelected(previouslySelectedChip, false);\n    }\n\n    this.selectedChipIds_.push(chipId);\n    this.adapter_.setSelected(chipId, true);\n  };\n  /**\n   * Handles a chip interaction event\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipInteraction = function (chipId) {\n    if (this.adapter_.hasClass(cssClasses.CHOICE) || this.adapter_.hasClass(cssClasses.FILTER)) {\n      this.toggleSelect_(chipId);\n    }\n  };\n  /**\n   * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipSelection = function (chipId, selected) {\n    var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n\n    if (selected && !chipIsSelected) {\n      this.select(chipId);\n    } else if (!selected && chipIsSelected) {\n      this.deselect_(chipId);\n    }\n  };\n  /**\n   * Handles the event when a chip is removed.\n   */\n\n\n  MDCChipSetFoundation.prototype.handleChipRemoval = function (chipId) {\n    this.deselect_(chipId);\n    this.adapter_.removeChip(chipId);\n  };\n  /**\n   * Deselects the chip with the given id.\n   */\n\n\n  MDCChipSetFoundation.prototype.deselect_ = function (chipId) {\n    var index = this.selectedChipIds_.indexOf(chipId);\n\n    if (index >= 0) {\n      this.selectedChipIds_.splice(index, 1);\n      this.adapter_.setSelected(chipId, false);\n    }\n  };\n  /**\n   * Toggles selection of the chip with the given id.\n   */\n\n\n  MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      this.deselect_(chipId);\n    } else {\n      this.select(chipId);\n    }\n  };\n\n  return MDCChipSetFoundation;\n}(MDCFoundation);\n\nexport { MDCChipSetFoundation }; // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\n\nexport default MDCChipSetFoundation;","map":{"version":3,"sources":["foundation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport * as tslib_1 from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, strings } from './constants';\nvar MDCChipSetFoundation = /** @class */ (function (_super) {\n    tslib_1.__extends(MDCChipSetFoundation, _super);\n    function MDCChipSetFoundation(adapter) {\n        var _this = _super.call(this, tslib_1.__assign({}, MDCChipSetFoundation.defaultAdapter, adapter)) || this;\n        /**\n         * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n         */\n        _this.selectedChipIds_ = [];\n        return _this;\n    }\n    Object.defineProperty(MDCChipSetFoundation, \"strings\", {\n        get: function () {\n            return strings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipSetFoundation, \"cssClasses\", {\n        get: function () {\n            return cssClasses;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MDCChipSetFoundation, \"defaultAdapter\", {\n        get: function () {\n            return {\n                hasClass: function () { return false; },\n                removeChip: function () { return undefined; },\n                setSelected: function () { return undefined; },\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns an array of the IDs of all selected chips.\n     */\n    MDCChipSetFoundation.prototype.getSelectedChipIds = function () {\n        return this.selectedChipIds_.slice();\n    };\n    /**\n     * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n     */\n    MDCChipSetFoundation.prototype.select = function (chipId) {\n        if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n            return;\n        }\n        if (this.adapter_.hasClass(cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {\n            var previouslySelectedChip = this.selectedChipIds_[0];\n            this.selectedChipIds_.length = 0;\n            this.adapter_.setSelected(previouslySelectedChip, false);\n        }\n        this.selectedChipIds_.push(chipId);\n        this.adapter_.setSelected(chipId, true);\n    };\n    /**\n     * Handles a chip interaction event\n     */\n    MDCChipSetFoundation.prototype.handleChipInteraction = function (chipId) {\n        if (this.adapter_.hasClass(cssClasses.CHOICE) || this.adapter_.hasClass(cssClasses.FILTER)) {\n            this.toggleSelect_(chipId);\n        }\n    };\n    /**\n     * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n     */\n    MDCChipSetFoundation.prototype.handleChipSelection = function (chipId, selected) {\n        var chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n        if (selected && !chipIsSelected) {\n            this.select(chipId);\n        }\n        else if (!selected && chipIsSelected) {\n            this.deselect_(chipId);\n        }\n    };\n    /**\n     * Handles the event when a chip is removed.\n     */\n    MDCChipSetFoundation.prototype.handleChipRemoval = function (chipId) {\n        this.deselect_(chipId);\n        this.adapter_.removeChip(chipId);\n    };\n    /**\n     * Deselects the chip with the given id.\n     */\n    MDCChipSetFoundation.prototype.deselect_ = function (chipId) {\n        var index = this.selectedChipIds_.indexOf(chipId);\n        if (index >= 0) {\n            this.selectedChipIds_.splice(index, 1);\n            this.adapter_.setSelected(chipId, false);\n        }\n    };\n    /**\n     * Toggles selection of the chip with the given id.\n     */\n    MDCChipSetFoundation.prototype.toggleSelect_ = function (chipId) {\n        if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n            this.deselect_(chipId);\n        }\n        else {\n            this.select(chipId);\n        }\n    };\n    return MDCChipSetFoundation;\n}(MDCFoundation));\nexport { MDCChipSetFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCChipSetFoundation;\n//# sourceMappingURL=foundation.js.map"]},"metadata":{},"sourceType":"module"}